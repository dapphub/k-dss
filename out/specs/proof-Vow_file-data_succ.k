requires "../rules.k"

module PROOF-VOW_FILE-DATA_SUCC
  imports ETHEREUM-SIMULATION
  imports EVM
  imports RULES

// Vow_file-data
rule
  <k> #execute ~> CONTINUATION => #halt ~> CONTINUATION </k>
  <exit-code> 1 </exit-code>
  <mode> NORMAL </mode>
  <schedule> BYZANTIUM </schedule>
  <analysis> .Map </analysis>
  <ethereum>
    <evm>
      <output> .WordStack </output>
      <statusCode> _ => EVMC_SUCCESS </statusCode>
      <callStack> VCallStack </callStack>
      <interimStates> _ </interimStates>
      <touchedAccounts> _ => _ </touchedAccounts>
      <callState>
        <program> #asMapOpCodes(#dasmOpCodes(#parseByteStack("0x608060405234801561001057600080fd5b507c01000000000000000000000000000000000000000000000000000000006000350463bf353dbb8114156100575761004c6004356000610893565b805460405260206040f35b6365fae35e8114156100885761006b61087c565b1561007557600080fd5b6100826004356000610893565b60018155005b639c52a7f18114156100b95761009c61087c565b156100a657600080fd5b6100b36004356000610893565b60008155005b6336569e778114156100d15760015460405260206040f35b63dfbf306d8114156100e95760025460405260206040f35b6370904ded8114156101015760035460405260206040f35b637f49edc48114156101255761011a6004356004610893565b805460405260206040f35b63d0adc35f81141561013d5760055460405260206040f35b6349dd5bb28114156101555760065460405260206040f35b632a1d2b3c81141561016d5760075460405260206040f35b6364bd70138114156101855760085460405260206040f35b63c349d36281141561019d5760095460405260206040f35b6368110b2f8114156101b557600a5460405260206040f35b631b8e8cfa8114156101cd57600b5460405260206040f35b63143e55e08114156101e3574260405260206040f35b6329ae81148114156102c7576101f761087c565b1561020157600080fd5b7f77616974000000000000000000000000000000000000000000000000000000006004351415610232576024356008555b7f73756d70000000000000000000000000000000000000000000000000000000006004351415610263576024356009555b7f62756d7000000000000000000000000000000000000000000000000000000000600435141561029457602435600a555b7f68756d700000000000000000000000000000000000000000000000000000000060043514156102c557602435600b555b005b63d4e8be8381141561037a576102db61087c565b156102e557600080fd5b7f666c6170000000000000000000000000000000000000000000000000000000006004351415610316576024356002555b7f666c6f70000000000000000000000000000000000000000000000000000000006004351415610347576024356003555b7f76617400000000000000000000000000000000000000000000000000000000006004351415610378576024356001555b005b6305db45388114156103975761038e6107f3565b60405260206040f35b6307a832b48114156103b4576103ab610813565b60405260206040f35b63697efb78811415610406576103c861087c565b156103d257600080fd5b6103e46103dd6107ae565b6004610893565b6103f160043582546108aa565b81556104016004356005546108aa565b600555005b6335aee16f8114156104665761041a6107ae565b6104286008546004356108aa565b111561043357600080fd5b6104406004356004610893565b805461044e816005546108cf565b60055561045d816006546108aa565b60065560008255005b63f37ac61c8114156104f45760065461048d6b033b2e3c9fd0803ce80000006004356108f4565b600081121561049b57600080fd5b6104a7600435836108cf565b6006557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af115156104f257600080fd5b005b632506855a8114156105825760075461051b6b033b2e3c9fd0803ce80000006004356108f4565b600081121561052957600080fd5b610535600435836108cf565b6007557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af1151561058057600080fd5b005b63bbbb0d7b81141561064257600654600954808210156105a157600080fd5b60006105ab610813565b1415156105b757600080fd5b6105c181836108cf565b6006556105d0816007546108aa565b6007557fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602452806044526020604060646000806003545af1151561063c57600080fd5b60206040f35b630e01198b8114156107a957600a5461066d600b54610668836106636107f3565b6108aa565b6108aa565b610675610813565b101561068057600080fd5b600060065414151561069157600080fd5b7ff4b9fa75000000000000000000000000000000000000000000000000000000006000526020604060046000806002545af115156106ce57600080fd5b6040517fa3b22fc4000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080855af1151561071157600080fd5b7fb7e9cd240000000000000000000000000000000000000000000000000000000060005260006004528160245260006044526020604060646000806002545af1151561075c57600080fd5b6040517fdc4d20fa000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080865af1151561079f57600080fd5b8060405260206040f35b600080fd5b60007f143e55e000000000000000000000000000000000000000000000000000000000600052602060006004600080305af115156107eb57600080fd5b600051905090565b600061080e6007546108096006546005546108aa565b6108aa565b905090565b60007ff53e4e6900000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af1151561085657600080fd5b600051600081101561086757600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b6000610889336000610893565b5460011415905090565b600082600052816020526040600020905092915050565b6000828201905060008311156108c95781811115156108c857600080fd5b5b92915050565b6000828203905060008311156108ee5781811015156108ed57600080fd5b5b92915050565b60008282029050600083141515610916578183820414151561091557600080fd5b5b929150505600a165627a7a72305820634b6770670cb607a0c795f1fd8c9dad7aa6578b658629bf830a64076a4ac2580029"), BYZANTIUM)) </program>
        <programBytes> #parseByteStack("0x608060405234801561001057600080fd5b507c01000000000000000000000000000000000000000000000000000000006000350463bf353dbb8114156100575761004c6004356000610893565b805460405260206040f35b6365fae35e8114156100885761006b61087c565b1561007557600080fd5b6100826004356000610893565b60018155005b639c52a7f18114156100b95761009c61087c565b156100a657600080fd5b6100b36004356000610893565b60008155005b6336569e778114156100d15760015460405260206040f35b63dfbf306d8114156100e95760025460405260206040f35b6370904ded8114156101015760035460405260206040f35b637f49edc48114156101255761011a6004356004610893565b805460405260206040f35b63d0adc35f81141561013d5760055460405260206040f35b6349dd5bb28114156101555760065460405260206040f35b632a1d2b3c81141561016d5760075460405260206040f35b6364bd70138114156101855760085460405260206040f35b63c349d36281141561019d5760095460405260206040f35b6368110b2f8114156101b557600a5460405260206040f35b631b8e8cfa8114156101cd57600b5460405260206040f35b63143e55e08114156101e3574260405260206040f35b6329ae81148114156102c7576101f761087c565b1561020157600080fd5b7f77616974000000000000000000000000000000000000000000000000000000006004351415610232576024356008555b7f73756d70000000000000000000000000000000000000000000000000000000006004351415610263576024356009555b7f62756d7000000000000000000000000000000000000000000000000000000000600435141561029457602435600a555b7f68756d700000000000000000000000000000000000000000000000000000000060043514156102c557602435600b555b005b63d4e8be8381141561037a576102db61087c565b156102e557600080fd5b7f666c6170000000000000000000000000000000000000000000000000000000006004351415610316576024356002555b7f666c6f70000000000000000000000000000000000000000000000000000000006004351415610347576024356003555b7f76617400000000000000000000000000000000000000000000000000000000006004351415610378576024356001555b005b6305db45388114156103975761038e6107f3565b60405260206040f35b6307a832b48114156103b4576103ab610813565b60405260206040f35b63697efb78811415610406576103c861087c565b156103d257600080fd5b6103e46103dd6107ae565b6004610893565b6103f160043582546108aa565b81556104016004356005546108aa565b600555005b6335aee16f8114156104665761041a6107ae565b6104286008546004356108aa565b111561043357600080fd5b6104406004356004610893565b805461044e816005546108cf565b60055561045d816006546108aa565b60065560008255005b63f37ac61c8114156104f45760065461048d6b033b2e3c9fd0803ce80000006004356108f4565b600081121561049b57600080fd5b6104a7600435836108cf565b6006557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af115156104f257600080fd5b005b632506855a8114156105825760075461051b6b033b2e3c9fd0803ce80000006004356108f4565b600081121561052957600080fd5b610535600435836108cf565b6007557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af1151561058057600080fd5b005b63bbbb0d7b81141561064257600654600954808210156105a157600080fd5b60006105ab610813565b1415156105b757600080fd5b6105c181836108cf565b6006556105d0816007546108aa565b6007557fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602452806044526020604060646000806003545af1151561063c57600080fd5b60206040f35b630e01198b8114156107a957600a5461066d600b54610668836106636107f3565b6108aa565b6108aa565b610675610813565b101561068057600080fd5b600060065414151561069157600080fd5b7ff4b9fa75000000000000000000000000000000000000000000000000000000006000526020604060046000806002545af115156106ce57600080fd5b6040517fa3b22fc4000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080855af1151561071157600080fd5b7fb7e9cd240000000000000000000000000000000000000000000000000000000060005260006004528160245260006044526020604060646000806002545af1151561075c57600080fd5b6040517fdc4d20fa000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080865af1151561079f57600080fd5b8060405260206040f35b600080fd5b60007f143e55e000000000000000000000000000000000000000000000000000000000600052602060006004600080305af115156107eb57600080fd5b600051905090565b600061080e6007546108096006546005546108aa565b6108aa565b905090565b60007ff53e4e6900000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af1151561085657600080fd5b600051600081101561086757600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b6000610889336000610893565b5460011415905090565b600082600052816020526040600020905092915050565b6000828201905060008311156108c95781811115156108c857600080fd5b5b92915050565b6000828203905060008311156108ee5781811015156108ed57600080fd5b5b92915050565b60008282029050600083141515610916578183820414151561091557600080fd5b5b929150505600a165627a7a72305820634b6770670cb607a0c795f1fd8c9dad7aa6578b658629bf830a64076a4ac2580029") </programBytes>
        <id> ACCT_ID </id>
        <caller> CALLER_ID </caller>
        <callData> #abiCallData("file", #bytes32(ABI_what), #uint256(ABI_data)) </callData>
        <callValue> 0 </callValue>
        <wordStack> .WordStack => _ </wordStack>
        <localMem> .Map => _ </localMem>
        <pc> 0 => _ </pc>
        <gas> VGas => _ </gas>
        <memoryUsed> 0 => _ </memoryUsed>
        <previousGas> _ => _ </previousGas>
        <static> false </static>
        <callDepth> VCallDepth => _ </callDepth>
      </callState>
      <substate>
        <selfDestruct> VSelfDestruct </selfDestruct>
        <log> _ => VLog </log>
        <refund> _ => VRefund </refund>
      </substate>
      <gasPrice> _ </gasPrice>
      <origin> ORIGIN_ID </origin>
      <previousHash> _ </previousHash>
      <ommersHash> _ </ommersHash>
      <coinbase> _ </coinbase>
      <stateRoot> _ </stateRoot>
      <transactionsRoot> _ </transactionsRoot>
      <receiptsRoot> _ </receiptsRoot>
      <logsBloom> _ </logsBloom>
      <difficulty> _ </difficulty>
      <number> _ </number>
      <gasLimit> _ </gasLimit>
      <gasUsed> _ </gasUsed>
      <timestamp> TIME </timestamp>
      <extraData> _ </extraData>
      <mixHash> _ </mixHash>
      <blockNonce> _ </blockNonce>
      <ommerBlockHeaders> _ </ommerBlockHeaders>
      <blockhash> _ </blockhash>
    </evm>
    <network>
      <activeAccounts> SetItem(ACCT_ID) _ </activeAccounts>
      <accounts>
        <account>
          <acctID> ACCT_ID </acctID>
          <balance> BAL </balance>
          <code> #parseByteStack("0x608060405234801561001057600080fd5b507c01000000000000000000000000000000000000000000000000000000006000350463bf353dbb8114156100575761004c6004356000610893565b805460405260206040f35b6365fae35e8114156100885761006b61087c565b1561007557600080fd5b6100826004356000610893565b60018155005b639c52a7f18114156100b95761009c61087c565b156100a657600080fd5b6100b36004356000610893565b60008155005b6336569e778114156100d15760015460405260206040f35b63dfbf306d8114156100e95760025460405260206040f35b6370904ded8114156101015760035460405260206040f35b637f49edc48114156101255761011a6004356004610893565b805460405260206040f35b63d0adc35f81141561013d5760055460405260206040f35b6349dd5bb28114156101555760065460405260206040f35b632a1d2b3c81141561016d5760075460405260206040f35b6364bd70138114156101855760085460405260206040f35b63c349d36281141561019d5760095460405260206040f35b6368110b2f8114156101b557600a5460405260206040f35b631b8e8cfa8114156101cd57600b5460405260206040f35b63143e55e08114156101e3574260405260206040f35b6329ae81148114156102c7576101f761087c565b1561020157600080fd5b7f77616974000000000000000000000000000000000000000000000000000000006004351415610232576024356008555b7f73756d70000000000000000000000000000000000000000000000000000000006004351415610263576024356009555b7f62756d7000000000000000000000000000000000000000000000000000000000600435141561029457602435600a555b7f68756d700000000000000000000000000000000000000000000000000000000060043514156102c557602435600b555b005b63d4e8be8381141561037a576102db61087c565b156102e557600080fd5b7f666c6170000000000000000000000000000000000000000000000000000000006004351415610316576024356002555b7f666c6f70000000000000000000000000000000000000000000000000000000006004351415610347576024356003555b7f76617400000000000000000000000000000000000000000000000000000000006004351415610378576024356001555b005b6305db45388114156103975761038e6107f3565b60405260206040f35b6307a832b48114156103b4576103ab610813565b60405260206040f35b63697efb78811415610406576103c861087c565b156103d257600080fd5b6103e46103dd6107ae565b6004610893565b6103f160043582546108aa565b81556104016004356005546108aa565b600555005b6335aee16f8114156104665761041a6107ae565b6104286008546004356108aa565b111561043357600080fd5b6104406004356004610893565b805461044e816005546108cf565b60055561045d816006546108aa565b60065560008255005b63f37ac61c8114156104f45760065461048d6b033b2e3c9fd0803ce80000006004356108f4565b600081121561049b57600080fd5b6104a7600435836108cf565b6006557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af115156104f257600080fd5b005b632506855a8114156105825760075461051b6b033b2e3c9fd0803ce80000006004356108f4565b600081121561052957600080fd5b610535600435836108cf565b6007557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af1151561058057600080fd5b005b63bbbb0d7b81141561064257600654600954808210156105a157600080fd5b60006105ab610813565b1415156105b757600080fd5b6105c181836108cf565b6006556105d0816007546108aa565b6007557fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602452806044526020604060646000806003545af1151561063c57600080fd5b60206040f35b630e01198b8114156107a957600a5461066d600b54610668836106636107f3565b6108aa565b6108aa565b610675610813565b101561068057600080fd5b600060065414151561069157600080fd5b7ff4b9fa75000000000000000000000000000000000000000000000000000000006000526020604060046000806002545af115156106ce57600080fd5b6040517fa3b22fc4000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080855af1151561071157600080fd5b7fb7e9cd240000000000000000000000000000000000000000000000000000000060005260006004528160245260006044526020604060646000806002545af1151561075c57600080fd5b6040517fdc4d20fa000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080865af1151561079f57600080fd5b8060405260206040f35b600080fd5b60007f143e55e000000000000000000000000000000000000000000000000000000000600052602060006004600080305af115156107eb57600080fd5b600051905090565b600061080e6007546108096006546005546108aa565b6108aa565b905090565b60007ff53e4e6900000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af1151561085657600080fd5b600051600081101561086757600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b6000610889336000610893565b5460011415905090565b600082600052816020526040600020905092915050565b6000828201905060008311156108c95781811115156108c857600080fd5b5b92915050565b6000828203905060008311156108ee5781811015156108ed57600080fd5b5b92915050565b60008282029050600083141515610916578183820414151561091557600080fd5b5b929150505600a165627a7a72305820634b6770670cb607a0c795f1fd8c9dad7aa6578b658629bf830a64076a4ac2580029") </code>
          <storage> #Vow.wards[CALLER_ID] |-> (Can)
                          #Vow.wait |-> (Wait => (#if ABI_what ==Int #string2Word("wait") #then ABI_data #else Wait #fi))
                          #Vow.sump |-> (Sump => (#if ABI_what ==Int #string2Word("sump") #then ABI_data #else Sump #fi))
                          #Vow.bump |-> (Bump => (#if ABI_what ==Int #string2Word("bump") #then ABI_data #else Bump #fi))
                          #Vow.hump |-> (Hump => (#if ABI_what ==Int #string2Word("hump") #then ABI_data #else Hump #fi))
                          _:Map
           </storage>
          <nonce> _ </nonce>
        </account>
       ... 
      </accounts>
      <txOrder> _ </txOrder>
      <txPending> _ </txPending>
      <messages> _ </messages>
    </network>
  </ethereum>
requires #rangeAddress(ACCT_ID)
andBool #notPrecompileAddress(ACCT_ID)
andBool #rangeAddress(CALLER_ID)
andBool #rangeAddress(ORIGIN_ID)
andBool #rangeUInt(48, TIME)
andBool #rangeUInt(256, BAL)
andBool VCallDepth <=Int 1024
  andBool #rangeBytes(32, ABI_what)
  andBool #rangeUInt(256, ABI_data)
  andBool #rangeUInt(256, Can)
  andBool #rangeUInt(256, Wait)
  andBool #rangeUInt(256, Sump)
  andBool #rangeUInt(256, Bump)
  andBool #rangeUInt(256, Hump)
  andBool VGas >Int 300000
  andBool Can ==Int 1

endmodule
